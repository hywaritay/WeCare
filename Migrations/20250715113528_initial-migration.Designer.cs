// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeCare.Domain.Infrastructure.Db;

#nullable disable

namespace WeCare.Migrations
{
    [DbContext(typeof(WeCareDbContext))]
    [Migration("20250715113528_initial-migration")]
    partial class initialmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WeCare.Domain.Infrastructure.Entity.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("AppointmentTime")
                        .HasColumnType("time");

                    b.Property<string>("AppointmentType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("WeCare.Domain.Infrastructure.Entity.Child", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Allergies")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BloodGroup")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MedicalHistory")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("MotherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MotherId");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("WeCare.Domain.Infrastructure.Entity.HealthRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BloodPressure")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<string>("HospitalName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Prescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecordType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Symptoms")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double?>("Temperature")
                        .HasColumnType("float");

                    b.Property<string>("Treatment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.ToTable("HealthRecords");
                });

            modelBuilder.Entity("WeCare.Domain.Infrastructure.Entity.HealthcareFacility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FacilityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmergencyCenter")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVaccinationCenter")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OperatingHours")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Services")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("HealthcareFacilities");
                });

            modelBuilder.Entity("WeCare.Domain.Infrastructure.Entity.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("WeCare.Domain.Infrastructure.Entity.TwoFactorAuth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BackupCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TwoFactorAuths");
                });

            modelBuilder.Entity("WeCare.Domain.Infrastructure.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhoneVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WeCare.Domain.Infrastructure.Entity.VaccinationRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdministeredBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("AdministeredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VaccineId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("UserId");

                    b.HasIndex("VaccineId");

                    b.ToTable("VaccinationRecords");
                });

            modelBuilder.Entity("WeCare.Domain.Infrastructure.Entity.Vaccine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AgeInMonths")
                        .HasColumnType("int");

                    b.Property<int>("AgeInWeeks")
                        .HasColumnType("int");

                    b.Property<string>("Contraindications")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SideEffects")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Vaccines");

                    b.HasData(
                        new
                        {
                            Id = new Guid("15c7e901-c570-417e-8d41-41b9f0b48c89"),
                            AgeInMonths = 0,
                            AgeInWeeks = 0,
                            CreatedAt = new DateTime(2025, 7, 15, 11, 35, 26, 801, DateTimeKind.Utc).AddTicks(950),
                            Description = "Bacillus Calmette-Guérin vaccine for tuberculosis",
                            IsActive = true,
                            IsRequired = true,
                            Manufacturer = "Various",
                            Name = "BCG"
                        },
                        new
                        {
                            Id = new Guid("656b8944-1110-41c7-bb00-196a49ccb910"),
                            AgeInMonths = 0,
                            AgeInWeeks = 0,
                            CreatedAt = new DateTime(2025, 7, 15, 11, 35, 26, 801, DateTimeKind.Utc).AddTicks(977),
                            Description = "Hepatitis B vaccine",
                            IsActive = true,
                            IsRequired = true,
                            Manufacturer = "Various",
                            Name = "Hepatitis B"
                        },
                        new
                        {
                            Id = new Guid("f715eebe-4605-488c-aeb5-cac70662055b"),
                            AgeInMonths = 1,
                            AgeInWeeks = 6,
                            CreatedAt = new DateTime(2025, 7, 15, 11, 35, 26, 801, DateTimeKind.Utc).AddTicks(984),
                            Description = "Oral Polio Vaccine",
                            IsActive = true,
                            IsRequired = true,
                            Manufacturer = "Various",
                            Name = "OPV"
                        },
                        new
                        {
                            Id = new Guid("599babcf-c59f-4917-9613-78be9cc803fe"),
                            AgeInMonths = 1,
                            AgeInWeeks = 6,
                            CreatedAt = new DateTime(2025, 7, 15, 11, 35, 26, 801, DateTimeKind.Utc).AddTicks(989),
                            Description = "Diphtheria, Pertussis, Tetanus vaccine",
                            IsActive = true,
                            IsRequired = true,
                            Manufacturer = "Various",
                            Name = "DPT"
                        },
                        new
                        {
                            Id = new Guid("76c7322e-ad36-4685-b9f7-61e1916e668b"),
                            AgeInMonths = 1,
                            AgeInWeeks = 6,
                            CreatedAt = new DateTime(2025, 7, 15, 11, 35, 26, 801, DateTimeKind.Utc).AddTicks(994),
                            Description = "Haemophilus influenzae type b vaccine",
                            IsActive = true,
                            IsRequired = true,
                            Manufacturer = "Various",
                            Name = "Hib"
                        },
                        new
                        {
                            Id = new Guid("005d2e0e-d481-43b0-9124-5d8b4b49ed4e"),
                            AgeInMonths = 1,
                            AgeInWeeks = 6,
                            CreatedAt = new DateTime(2025, 7, 15, 11, 35, 26, 801, DateTimeKind.Utc).AddTicks(1004),
                            Description = "Pneumococcal Conjugate Vaccine",
                            IsActive = true,
                            IsRequired = true,
                            Manufacturer = "Various",
                            Name = "PCV"
                        },
                        new
                        {
                            Id = new Guid("2a695ba5-696e-4ea7-9d1d-39c4a3ed122b"),
                            AgeInMonths = 1,
                            AgeInWeeks = 6,
                            CreatedAt = new DateTime(2025, 7, 15, 11, 35, 26, 801, DateTimeKind.Utc).AddTicks(1009),
                            Description = "Rotavirus vaccine",
                            IsActive = true,
                            IsRequired = true,
                            Manufacturer = "Various",
                            Name = "Rotavirus"
                        },
                        new
                        {
                            Id = new Guid("acae0e76-7c9d-4da1-9217-9c306152e665"),
                            AgeInMonths = 3,
                            AgeInWeeks = 14,
                            CreatedAt = new DateTime(2025, 7, 15, 11, 35, 26, 801, DateTimeKind.Utc).AddTicks(1014),
                            Description = "Inactivated Polio Vaccine",
                            IsActive = true,
                            IsRequired = true,
                            Manufacturer = "Various",
                            Name = "IPV"
                        },
                        new
                        {
                            Id = new Guid("7ab1aa9d-f6d5-400f-b4ce-8eb98dbba9d6"),
                            AgeInMonths = 12,
                            AgeInWeeks = 52,
                            CreatedAt = new DateTime(2025, 7, 15, 11, 35, 26, 801, DateTimeKind.Utc).AddTicks(1020),
                            Description = "Measles, Mumps, Rubella vaccine",
                            IsActive = true,
                            IsRequired = true,
                            Manufacturer = "Various",
                            Name = "MMR"
                        });
                });

            modelBuilder.Entity("WeCare.Domain.Infrastructure.Entity.Appointment", b =>
                {
                    b.HasOne("WeCare.Domain.Infrastructure.Entity.Child", "Child")
                        .WithMany("Appointments")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeCare.Domain.Infrastructure.Entity.User", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WeCare.Domain.Infrastructure.Entity.User", null)
                        .WithMany("Appointments")
                        .HasForeignKey("UserId");

                    b.Navigation("Child");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("WeCare.Domain.Infrastructure.Entity.Child", b =>
                {
                    b.HasOne("WeCare.Domain.Infrastructure.Entity.User", "Mother")
                        .WithMany("Children")
                        .HasForeignKey("MotherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Mother");
                });

            modelBuilder.Entity("WeCare.Domain.Infrastructure.Entity.HealthRecord", b =>
                {
                    b.HasOne("WeCare.Domain.Infrastructure.Entity.Child", "Child")
                        .WithMany("HealthRecords")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");
                });

            modelBuilder.Entity("WeCare.Domain.Infrastructure.Entity.Notification", b =>
                {
                    b.HasOne("WeCare.Domain.Infrastructure.Entity.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WeCare.Domain.Infrastructure.Entity.TwoFactorAuth", b =>
                {
                    b.HasOne("WeCare.Domain.Infrastructure.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WeCare.Domain.Infrastructure.Entity.VaccinationRecord", b =>
                {
                    b.HasOne("WeCare.Domain.Infrastructure.Entity.Child", "Child")
                        .WithMany("VaccinationRecords")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeCare.Domain.Infrastructure.Entity.User", null)
                        .WithMany("VaccinationRecords")
                        .HasForeignKey("UserId");

                    b.HasOne("WeCare.Domain.Infrastructure.Entity.Vaccine", "Vaccine")
                        .WithMany("VaccinationRecords")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("WeCare.Domain.Infrastructure.Entity.Child", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("HealthRecords");

                    b.Navigation("VaccinationRecords");
                });

            modelBuilder.Entity("WeCare.Domain.Infrastructure.Entity.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Children");

                    b.Navigation("Notifications");

                    b.Navigation("VaccinationRecords");
                });

            modelBuilder.Entity("WeCare.Domain.Infrastructure.Entity.Vaccine", b =>
                {
                    b.Navigation("VaccinationRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
